apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

Properties properties = new Properties()
properties.load(project.rootProject.file('gradle.properties').newDataInputStream())
android {
    compileSdkVersion build_versions.target_sdk
    buildToolsVersion build_versions.build_tools
    defaultConfig {
        applicationId "com.ly.test"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode Integer.parseInt(VERSION_CODE)
        versionName VERSION_NAME

        multiDexEnabled true
        renderscriptTargetApi 19
        renderscriptSupportModeEnabled true
        if ("DEV".contentEquals(BUILD_TYPE)) {
            buildConfigField 'String', 'API_SERVER_URL', '"192.168.0.108"'
        } else if ("TEST".contentEquals(BUILD_TYPE)) {
            buildConfigField 'String', 'API_SERVER_URL', '"101.132.24.138"'
        } else if ("RELEASE".contentEquals(BUILD_TYPE)) {
            buildConfigField 'String', 'API_SERVER_URL', '"www.curefun.com"'
        }
        ndk {
            //设置支持的SO库架构（开发者可以根据需要，选择一个或多个平台的so）
            abiFilters "armeabi", "armeabi-v7a", "arm64-v8a", "x86","arm64-v8a","x86_64"
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
                includeCompileClasspath = true
            }
        }
        manifestPlaceholders = [BASE_URL            : DEBUG_BASE_URL,
                                BASE_SHARE_URL      : DEBUG_SHARE_URL,
                                TENCENT_APPKEY_VALUE: properties.getProperty("tencentAppKey"),
                                CUR_ENV             : DEBUG_ENV,
                                VERSION_NAME        : VERSION_NAME,
                                VERSION_CODE        : VERSION_CODE,
                                JPUSH_PKGNAME       : applicationId,
                                JPUSH_APPKEY        : "a07ca15d79f8ffe5eb49ab32", //JPush 上注册的包名对应的 Appkey.
                                JPUSH_CHANNEL       : "developer-default", //暂时填写默认值即可.
                                PIC_HOST            : PIC_HOST]
    }
    flavorDimensions "debug", 'dev', "release"
    signingConfigs {
        def appStoreFile = System.getenv("STORE_FILE")
        def appStorePassword = System.getenv("STORE_PASSWORD")
        def appKeyAlias = System.getenv("KEY_ALIAS")
        def appKeyPassword = System.getenv("KEY_PASSWORD")
        if (!appStoreFile || !appStorePassword || !appKeyAlias || !appKeyPassword) {
            appStoreFile = "../basetool.jks"
            appStorePassword = "liyunlong"
            appKeyAlias = "liyun"
            appKeyPassword = "liyunlong"
        }
        debug {
            keyAlias appKeyAlias
            keyPassword appKeyPassword
            storeFile file(appStoreFile)
            storePassword appStorePassword
            v1SigningEnabled true
            v2SigningEnabled true
        }

        release {
            keyAlias appKeyAlias
            keyPassword appKeyPassword
            storeFile file(appStoreFile)
            storePassword appStorePassword
            v1SigningEnabled true
            v2SigningEnabled true
        }
        dev {
            keyAlias appKeyAlias
            keyPassword appKeyPassword
            storeFile file(appStoreFile)
            storePassword appStorePassword
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
    //创建自己的构建版本,debug为默认版本，在buildTypes中添加即可
    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "${project.name}_${defaultConfig.versionName}_${variant.buildType.name}.apk"
                }
            }

        }

        release {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            minifyEnabled true
            zipAlignEnabled true
            debuggable true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "${project.name}_${defaultConfig.versionName}_${variant.buildType.name}.apk"
                }
            }
        }
        dev {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            minifyEnabled false
            zipAlignEnabled true
            debuggable true
            signingConfig signingConfigs.dev
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            applicationIdSuffix ".dev"
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "${project.name}_${defaultConfig.versionName}_${variant.buildType.name}.apk"
                }
            }
        }
    }
    //1 productFlavors主要是用来做多渠道打包等操作会用到
    //2 如果你的应用会使用到不同的API_URL，不同的版本号，相同的代码需要生成不同的apk文件等等，都可以在productFlavors上做文章
    productFlavors {
        product_release {
            signingConfig signingConfigs.release
            dimension "release"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix ".release"//applicationId后追加
        }
        product_dev {
            signingConfig signingConfigs.dev
            dimension "dev"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix ".dev"//applicationId后追加
        }
        product_debug {
            signingConfig signingConfigs.debug
            dimension "debug"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix ".debug"//applicationId后追加
        }
    }
    dexOptions {
        preDexLibraries false
        jumboMode true
        javaMaxHeapSize "4g"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    sourceSets {
        main.jniLibs.srcDirs = ['libs']
    }
    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
        exclude 'META-INF/proguard/coroutines.pro'
    }
    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }
}
//获取时间戳
def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmm')
    return formattedDate
}
// 用于指定所有aar引用同样版本的support包
configurations.all {
    resolutionStrategy.eachDependency { details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion '28.0.0'
            }
        }
    }
}
dependencies {
    implementation fileTree(dir:'libs', include: ['*.jar'])
    api develop.kotlin_jdk
    api develop.support.constraint_layout
    api develop.support.appcompat
    api develop.support.recyclerview
    api develop.rxjava.rxjava2
    api develop.rxjava.rxandroid
    api develop.retrofit2.retrofit
    api develop.permissions.easypermission

    api develop.koin.koin_android
    api develop.koin.koin_androidx_scope
    api develop.koin.koin_androidx_viewmodel
    api develop.anko
    // 底部菜单
    api(develop.flyco_tablayout) {
        exclude group: 'com.android.support', module: 'support-v4'
    }
    api develop.androidx_swiperefresh

    implementation project(':basetool')
    implementation project(':permission')
}